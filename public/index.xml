<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding and Life</title>
    <link>https://blog.lukas-coding.us/</link>
    <description>Recent content on Coding and Life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Jul 2018 22:30:47 -0400</lastBuildDate>
    
	<atom:link href="https://blog.lukas-coding.us/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to Host Your Website on Github for Free Without Code!</title>
      <link>https://blog.lukas-coding.us/2018/07/22/how-to-host-your-website-on-github/</link>
      <pubDate>Sun, 22 Jul 2018 22:30:47 -0400</pubDate>
      
      <guid>https://blog.lukas-coding.us/2018/07/22/how-to-host-your-website-on-github/</guid>
      <description>First of all, what is Github? According to Wikipedia, &amp;ldquo;Github is a web-based hosting service for version control using Git.&amp;rdquo; This is great! You can store your code and its history too. But, its awesomeness doesn&amp;rsquo;t end there. Rather than just storing the source code, Github also provides you free website hosting. You might think, &amp;ldquo;that totally makes sense.&amp;rdquo; Since the source code is already there, it&amp;rsquo;s very easy to simply host the website using the existing source code.</description>
    </item>
    
    <item>
      <title>Python Decorator</title>
      <link>https://blog.lukas-coding.us/2018/07/02/python-decorator/</link>
      <pubDate>Mon, 02 Jul 2018 04:22:57 -0400</pubDate>
      
      <guid>https://blog.lukas-coding.us/2018/07/02/python-decorator/</guid>
      <description>Decorator is a very useful and powerful syntax that Python developers came up with in Python 2.4 through PEP 318 proposal. Since then, many powerful libraries started using this extensively. These libraries including Flask, Django, AioHTTP, Sanic, and so on&amp;hellip; You got the point. Python decorator is powerful!
Flask (quoted directly from the official page)
from flask import Flask app = Flask(__name__) @app.route(&amp;#34;/&amp;#34;) def hello(): return &amp;#34;Hello World!&amp;#34; Note: app.</description>
    </item>
    
    <item>
      <title>High-Performance String Concatenation in Go</title>
      <link>https://blog.lukas-coding.us/2018/06/24/high-performance-string-concatenation/</link>
      <pubDate>Sun, 24 Jun 2018 00:20:16 -0400</pubDate>
      
      <guid>https://blog.lukas-coding.us/2018/06/24/high-performance-string-concatenation/</guid>
      <description>Go is a great and powerful programming language as well as my personal favorite. It&amp;rsquo;s statically compiled, high performant, and great at concurrent computing. Even so, it&amp;rsquo;s still the programmer&amp;rsquo;s responsibility to utilize the programming language&amp;rsquo;s strength fully.
In this post, I&amp;rsquo;ll talk about how to concatenate strings efficiently. As usual, we&amp;rsquo;ll start with the naive approach and slowly improve upon it.
In every approach, I averaged 30 trials for each n.</description>
    </item>
    
    <item>
      <title>Minimal Go Docker Container (122x smaller)</title>
      <link>https://blog.lukas-coding.us/2018/06/16/minimal-go-container/</link>
      <pubDate>Sat, 16 Jun 2018 00:00:00 -0400</pubDate>
      
      <guid>https://blog.lukas-coding.us/2018/06/16/minimal-go-container/</guid>
      <description>Before we talk about how to make a small Go container, I want to talk a little bit about why we need it in the first place. According to Abby, an AWS evangelist, &amp;ldquo;smaller images mean faster build, and faster deploys. This also means a smaller attack surface&amp;rdquo; (check her video out here). This brings us to these 3 important points:
 Speed Security Stability (This is an implicit benefit from the previous 2 points)  This is great, right?</description>
    </item>
    
    <item>
      <title>Greedy Algorithm (Lecture)</title>
      <link>https://blog.lukas-coding.us/2018/01/23/greedy-algorithm/</link>
      <pubDate>Tue, 23 Jan 2018 19:24:27 -0400</pubDate>
      
      <guid>https://blog.lukas-coding.us/2018/01/23/greedy-algorithm/</guid>
      <description>Lecture by James Wang (jzwang@clemson.edu)
 Taking the maximum benefit without considering what will happen next; greedy algorithms just need to maximize the local cost.
 Greedy algorithms can be parallelized well. Each CPU can be used to calculate the local min/max. But, you might not find the best solution using greedy algorithms.
Steps to finding efficient greedy algorithm:
 Start by finding a dynamic programming style solution Each recursive step need to solve the local min/max (find the greedy choice) Find the recursive solution using the greedy choice Convert to an iterative algorithm if possible  More generally, taking the direct approach:</description>
    </item>
    
    <item>
      <title>How to create Debian packages and make a native app for any web app</title>
      <link>https://blog.lukas-coding.us/2018/01/19/how-to-create-debian-packages-and-make-a-nativeapp-for/</link>
      <pubDate>Fri, 19 Jan 2018 16:50:33 -0400</pubDate>
      
      <guid>https://blog.lukas-coding.us/2018/01/19/how-to-create-debian-packages-and-make-a-nativeapp-for/</guid>
      <description>To intro, I am an undergraduate Computer Science student at Clemson University. I was having issues with printing to the Clemson network printers, Clemson has desktop printer client apps for macs and windows machines to be able to print to the network printers but only a web app to print from Linux machines, with no desktop app, therefore I wanted to make one to serve Debian Linux machines.
I found a wrapper class for being able to wrap most web apps into desktop apps jiahaog/nativefier.</description>
    </item>
    
    <item>
      <title>Convert .snt File Extension to .txt File</title>
      <link>https://blog.lukas-coding.us/2018/01/04/snt-file-extension-to-txt-file/</link>
      <pubDate>Thu, 04 Jan 2018 23:51:40 -0400</pubDate>
      
      <guid>https://blog.lukas-coding.us/2018/01/04/snt-file-extension-to-txt-file/</guid>
      <description>This should take between two and ten minutes and from this tutorial, you should gain a useful file as well as some knowledge of SQL and python.
If your not looking for a detailed tutorial, scroll to the bottom or Ctrl+f &amp;ldquo;steps:&amp;rdquo; then Enter
To preface this post, I have always run a windows pc and have wanted to transition to Linux for a long time, but am no longer putting it off.</description>
    </item>
    
    <item>
      <title>Shared Storage (NFS)</title>
      <link>https://blog.lukas-coding.us/2017/12/28/shared-storage-nfs/</link>
      <pubDate>Thu, 28 Dec 2017 02:57:47 -0400</pubDate>
      
      <guid>https://blog.lukas-coding.us/2017/12/28/shared-storage-nfs/</guid>
      <description>At home, I have 2 cheap single boards: Rock64 and Raspberry pi 3. I&amp;rsquo;ve been using both of them as my servers. Today, I did a maintenance to both of my servers, including upgrading, restructuring the network, and add a shared storage. In this story, I will share step-by-step how I installed NFS shared storage to my server and also my thought process a little bit.
There are 3 popular shared storage protocols that I found on the internet:</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://blog.lukas-coding.us/2017/12/27/first-post/</link>
      <pubDate>Wed, 27 Dec 2017 02:16:25 -0400</pubDate>
      
      <guid>https://blog.lukas-coding.us/2017/12/27/first-post/</guid>
      <description>Hello World! This is my first post!
Go:
log.Println(&amp;#34;Hello World!&amp;#34;) C:
printf(&amp;#34;Hello World!&amp;#34;); C++:
cout &amp;lt;&amp;lt; &amp;#34;Hello World!&amp;#34; &amp;lt;&amp;lt; endl;  Python:
print(&amp;#34;Hello World!&amp;#34;) Java:
System.out.println(&amp;#34;Hello World!&amp;#34;); Javascript:
console.log(&amp;#34;Hello World!&amp;#34;) </description>
    </item>
    
  </channel>
</rss>